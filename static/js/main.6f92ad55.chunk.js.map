{"version":3,"sources":["Info.js","App.js","serviceWorker.js","index.js"],"names":["INFORMATION","bio","Title","id","className","style","margin","fontSize","borderBottom","paddingBottom","href","React","Component","Blurb","width","src","alt","map","line","Skill","this","props","url","children","Skills","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+TASeA,EATG,CACdC,IAAK,CACD,SAEA,8GACA,sKCCFC,E,iLAEF,OACE,kBAAC,IAAD,CAAkBC,GAAI,SACpB,yBAAKC,UAAU,aACb,uBAAGC,MAAO,CAACC,OAAQ,EAAGC,SAAU,SAAUC,aAAc,mBAAoBC,cAAe,SAA3F,eACA,uBAAGJ,MAAK,aAAGC,OAAQ,EAAGC,SAAU,SAAxB,SAAyC,kBAAjD,2BACA,6BACE,uBAAGG,KAAK,UAAR,YACA,gCACA,uBAAGA,KAAK,WAAR,iB,GAVQC,IAAMC,WAkBpBC,E,iLAEF,OACE,kBAAC,IAAD,CAAkBV,GAAI,SACpB,6BACE,wCACA,yBAAKC,UAAU,aACb,yBAAKC,MAAO,CAACS,MAAO,UAAWR,OAAQ,UACrC,yBAAKS,IAAI,uGAAuGC,IAAI,mBACnHhB,EAAYC,IAAIgB,KAAI,SAACC,GAAD,OACnB,2BAAIA,c,GAVAP,IAAMC,WAoBpBO,E,iLAEF,OACE,yBAAKf,UAAU,SACb,yBAAKW,IAAKK,KAAKC,MAAMC,IAAKN,IAAKI,KAAKC,MAAME,WAC1C,+BAAQH,KAAKC,MAAME,e,GALPZ,IAAMC,WAWpBY,E,iLAEF,OACE,kBAAC,IAAD,CAAkBrB,GAAI,UACtB,6BACE,sCACA,yBAAKC,UAAU,cACb,kBAAC,EAAD,CAAOkB,IAAI,sHAAX,UACA,kBAAC,EAAD,CAAOA,IAAI,sEAAX,OACA,kBAAC,EAAD,CAAOA,IAAI,mDAAX,SACA,kBAAC,EAAD,CAAOA,IAAI,wEAAX,MACA,kBAAC,EAAD,CAAOA,IAAI,yEAAX,UACA,kBAAC,EAAD,CAAOA,IAAI,+EAAX,cACA,kBAAC,EAAD,CAAOA,IAAI,yEAAX,UACA,kBAAC,EAAD,CAAOA,IAAI,0JAAX,QACA,kBAAC,EAAD,CAAOA,IAAI,iEAAX,OACA,kBAAC,EAAD,CAAOA,IAAI,qFAAX,UACA,kBAAC,EAAD,CAAOA,IAAI,8DAAX,SACA,kBAAC,EAAD,CAAOA,IAAI,uEAAX,QACA,kBAAC,EAAD,CAAOA,IAAI,0DAAX,cACA,kBAAC,EAAD,CAAOA,IAAI,8FAAX,e,GApBWX,IAAMC,WAsEZa,MAbf,WACE,OACE,yBAAKrB,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKW,IAAI,wDAAwDC,IAAI,GAAGZ,UAAU,SAClF,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SC3GYsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.6f92ad55.chunk.js","sourcesContent":["var INFORMATION = {\n    bio: [\n        \"Hello!\",\n        // \"My name is Thomas Ryan and I am an avid programmer, network/security professional, and all around eager to learn kind of guy\",\n        \"My name is Thomas Ryan, and the only reason I get out of bed every morning is to tinker, create, and learn.\",\n        \"Graduating from Ontario Tech University in 2019, I've continued to learn new concepts, expand my portfolio, and add many new programming languages to my skillset\"\n    ]\n};\n\nexport default INFORMATION;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport ScrollableAnchor from 'react-scrollable-anchor';\nimport INFORMATION from './Info.js'\n\nclass Title extends React.Component {\n  render(){\n    return(\n      <ScrollableAnchor id={\"Title\"}>\n        <div className=\"Title-div\">\n          <p style={{margin: 0, fontSize: \"12vmin\", borderBottom: \"10px solid white\", paddingBottom: \"20px\"}}>Thomas Ryan</p>\n          <p style={{margin: 0, fontSize: '6vmin', margin: \"20px 0 60px 0\"}}>Network and IT Security</p>\n          <div>\n            <a href=\"#Blurb\">About Me</a>\n            <p>|</p>\n            <a href=\"#Skills\">Skills</a>\n          </div>\n        </div>\n      </ScrollableAnchor>\n    )\n  }\n}\n\nclass Blurb extends React.Component {\n  render(){\n    return(\n      <ScrollableAnchor id={\"Blurb\"}>\n        <div>\n          <h1>About Me</h1>\n          <div className=\"Blurb-div\">\n            <div style={{width: \"100vmin\", margin: \"5vmin\"}}>\n              <img src=\"https://cdn.discordapp.com/avatars/160941453671923722/ec280069971c9c5a6970636927fa7ea5.webp?size=128\" alt=\"ProfilePicture\"/>\n              {INFORMATION.bio.map((line) => (\n                <p>{line}</p>\n              ))}\n            </div>\n          </div>\n        </div>\n      </ScrollableAnchor>\n    )\n  }\n}\n\nclass Skill extends React.Component {\n  render(){\n    return(\n      <div className=\"Skill\">\n        <img src={this.props.url} alt={this.props.children}></img>\n        <label>{this.props.children}</label>\n      </div>\n    )\n  }\n}\n\nclass Skills extends React.Component {\n  render(){\n    return(\n      <ScrollableAnchor id={'Skills'}>\n      <div>\n        <h1>Skills</h1>\n        <div className=\"Skills-div\">\n          <Skill url=\"https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/Python-logo-notext.svg/1024px-Python-logo-notext.svg.png\">Python</Skill>\n          <Skill url=\"https://raw.githubusercontent.com/isocpp/logos/master/cpp_logo.png\">C++</Skill>\n          <Skill url=\"https://cdn.worldvectorlogo.com/logos/react.svg\">React</Skill>\n          <Skill url=\"https://upload.wikimedia.org/wikipedia/commons/8/82/C_Sharp_logo.png\">C#</Skill>\n          <Skill url=\"http://logo-load.com/uploads/posts/2016-02/1456125746_logo-ubuntu.png\">Ubuntu</Skill>\n          <Skill url=\"https://upload.wikimedia.org/wikipedia/commons/2/2f/PowerShell_5.0_icon.png\">PowerShell</Skill>\n          <Skill url=\"https://dwglogo.com/wp-content/uploads/2018/03/SQLite_Vector_logo.png\">SQLite</Skill>\n          <Skill url=\"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d5/Rust_programming_language_black_logo.svg/1200px-Rust_programming_language_black_logo.svg.png\">Rust</Skill>\n          <Skill url=\"https://git-scm.com/images/logos/downloads/Git-Icon-1788C.png\">Git</Skill>\n          <Skill url=\"https://cdn.freebiesupply.com/logos/large/2x/github-icon-logo-png-transparent.png\">GitHub</Skill>\n          <Skill url=\"https://www.w3.org/html/logo/downloads/HTML5_Badge_512.png\">HTML5</Skill>\n          <Skill url=\"https://verekia.com/_pages/css3/introduction-css3/img/css3-logo.png\">CSS3</Skill>\n          <Skill url=\"https://cdn.worldvectorlogo.com/logos/javascript-1.svg\">JavaScript</Skill>\n          <Skill url=\"https://media.discordapp.net/attachments/276385071424995330/649338771770179645/512x512.png\">Bash</Skill>\n          </div>\n      </div>\n      </ScrollableAnchor>\n    )\n  }\n} \n\n// class Skills extends React.Component {\n//   constructor(){\n//     super();\n//     this.state = {windowWidth: null}\n//   }\n//   componentDidMount(){\n//     window.addEventListener(\"resize\", () => {\n//       this.setState({windowWidth: window.innerWidth});\n//     })\n//   }\n//   render(){\n//     if (window.innerWidth >= 1000) {\n//       return(\n//         <ScrollableAnchor id={'Skills'}>\n//           <div className=\"Skills-div\">\n//             <p>Larger than 1000px</p>\n//           </div>\n//         </ScrollableAnchor>\n//     )} else {\n//       return(\n//         <ScrollableAnchor id={'Skills'}>\n//           <div className=\"Skills-div\">\n//             <p>Smaller than 1000px</p>\n//           </div>\n//         </ScrollableAnchor>\n//       )}\n//   }\n// }\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src=\"https://wallpaperplay.com/walls/full/5/6/7/292445.jpg\" alt=\"\" className=\"test\"></img>\n        <Title/>\n        <Blurb/>\n        <Skills/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}